// Payment is an abstract class
class Payment {
    #payementId;
    #creationDate;
    #amount;      
    #status;

    constructor(payementId, creationDate, amount, status) {
        if (this.constructor == Payment) {
          throw new Error("Abstract classes can't be instantiated.");
        }
        else {
            this.#payementId = payementId;
            this.#creationDate = creationDate;
            this.#amount = amount;
            this.#status = status;
        }
    }

    initiateTransaction();
}

class Check extends Payment {
    #bankName;
    #checkNumber;

    constructor(bankName, checkNumber, creationDate, amount, status) {
        this.#bankName = bankName;
        this.#checkNumber = checkNumber;
        super(creationDate,amount,status);
    }

    initiateTransaction() {
        // functionality 
    }
}

class CreditCard extends Payment {
    #nameOnCard;
    #zipCode;

    constructor(nameOnCard, zipCode, creationDate, amount, status) {
        this.#nameOnCard = nameOnCard;
        this.#zipCode = zipCode;
        super(creationDate,amount,status);
    }

    initiateTransaction() {
        // functionality 
    }
}

class Cash extends Payment {
    #cashTendered;

    constructor(cashTendered, creationDate, amount, status) {
        this.#cashTendered = cashTendered;
        super(creationDate,amount,status);
    }

    initiateTransaction() {
        // functionality 
    }
}

class Bill {
    #billId;
    #amount;
    #tip;
    #tax;
    #isPaid;

    constructor(billId, amount, tip, tax, isPaid) {
        this.#billId = billId;
        this.#amount = amount;
        this.#tip = tip;
        this.#tax = tax;
        this.#isPaid = isPaid;
    }
    generateBill();
}