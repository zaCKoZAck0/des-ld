class MeetingScheduler {
  #organizer;
  #calendar;
  #rooms;

  // Scheduler is a singleton class that ensures it will have only one active instance at a time
  constructor(organizer, calendar) {
    if (MeetingScheduler._instance) {
      throw new Error("Singleton classes can't be instantiated more than once.")
    }

    MeetingScheduler._instance = this;
    this.#organizer = organizer;
    this.#calendar = calendar;
    this.#rooms = new Array();
  }

  // Created a static method to access the singleton instance of Scheduler class
  static getInstance() {
    if(!MeetingScheduler._instance) {
      return new MeetingScheduler();
    }

    return MeetingScheduler._instance;
  }

  scheduleMeeting(users, interval) {}
  cancelMeeting(users, interval) {}
  bookRoom(room, numberOfPersons, interval) {}
  releaseRoom(room, interval) {}
  checkRoomsAvailability(numberOfPersons, interval) {}
}