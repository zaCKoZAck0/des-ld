// User is an abstract class
public abstract class Book {
    private String isbn;
    private String title;
    private String subject;
    private String publisher;
    private String language;
    private int numberOfPages;
    private BookFormat bookFormat;
    private List<Author> authors;
}

public class BookItem
{
    private string id;
    private bool isReferenceOnly;
    private DateTime borrowed;
    private DateTime dueDate;
    private double price;
    private BookStatus status;
    private DateTime dateOfPurchase;
    private DateTime publicationDate;
    private Rack placedAt;
    private Book book;  // Aggregation: BookItem has a reference to a Book

    // Constructors, getters, and other existing methods...

    public bool Checkout(string memberId)
    {
        // Implementation for checkout logic
        // Update the status, set due date, etc.
        // Return true if checkout is successful, false otherwise
        return true;  // Placeholder, replace with actual logic
    }

    public void SetPlacedAt(Rack rack)
    {
        this.placedAt = rack;
        // Additional logic if needed
    }

    public void SetAddedBy(Librarian librarian)
    {
        // Implementation for setting the librarian who added the book item
        // This might involve updating logs or other data related to the librarian
        // No return value as it's a setter method
    }

    // Other methods...

    public Book GetBook()
    {
        return book;
    }
}

class Rack {
    private int number;
    private String locationIdentifier;
    private List<BookItem> bookItems;
    public void addBookItem(BookItem bookItem) {
        // definition
    }
}