// Payment is an abstract class
class Payment {
  #amount;
  #timestamp;
  #status;

  constructor(amount, timestamp, status) {
    if (this.constructor == Payment) {
        throw new Error("Abstract classes can't be instantiated.");
    }
    else {
      this.#amount = amount;
      this.#timestamp = timestamp;
      this.#status = status; // Refers to the PaymentStatus enum
    }
  }
  
  // Returns the PaymentStatus enum
  makePayment();
}

class CreditCard extends Payment {
  #nameOnCard;
  #cardNumber;
  #billingAddress;
  #code;

  constructor(amount, timestamp, status, nameOnCard, cardNumber, billingAddress, code) {
    this.#nameOnCard = nameOnCard;
    this.#cardNumber = cardNumber;
    this.#billingAddress = billingAddress;
    this.#code = code;
    super(amount, timestamp, status);
  }  

  // Returns the PaymentStatus enum
  makePayment() {
      // functionality
  }
}

class ElectronicBankTransfer extends Payment {
  #bankName;
  #routingNumber;
  #accountNumber;
  #billingAddress;

  constructor(amount, timestamp, status, bankName, routingNumber, accountNumber, billingAddress) {
    this.#bankName = bankName;
    this.#routingNumber = routingNumber; 
    this.#accountNumber = accountNumber;
    this.#billingAddress = billingAddress;
    super(amount, timestamp, status);
  } 
  
  // Returns the PaymentStatus enum
  makePayment() {
      // functionality
  }
}

class Cash extends Payment {
  #billingAddress;

  constructor(amount, timestamp, status, billingAddress) {
    this.#billingAddress = billingAddress;
    super(amount, timestamp, status);
  }

  // Returns the PaymentStatus enum
  makePayment() {
      // functionality
  }
}