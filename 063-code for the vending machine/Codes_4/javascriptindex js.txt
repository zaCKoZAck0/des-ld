class VendingMachine {
    #currentState;
    #amount;
    #noOfRacks;
    #racks;
    #availableRacks;
    constructor(currentState, amount, noOfRacks, racks, availableRacks) {
        if (VendingMachine._instance){
            throw new Error("Singleton classes can't be instantiated more than once.")
        }
        // The VendingMachine is a singleton class that ensures it will have only one active instance at a time
        VendingMachine._instance = this;

        this.#currentState = currentState;
        this.#amount = amount;
        this.#noOfRacks = noOfRacks;
        this.#racks = racks;
        this.#availableRacks = availableRacks;
    }
    // Created a static method to access the singleton instance of VendingMachine
    static getInstance() {
        if(!VendingMachine._instance){
            return new VendingMachine();
        }
        return VendingMachine._instance;
    }
    insertMoney(amount);
    pressButton(rackNumber);
    returnChange(amount);
    updateInventory(rackNumber);
    dispenseProduct(rackNumber);
    getProductIdAtRack(rackNumber);
}